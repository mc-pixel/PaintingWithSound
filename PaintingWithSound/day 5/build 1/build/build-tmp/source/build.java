/* autogenerated by Processing revision 1283 on 2022-07-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import hype.*;
import hype.extended.layout.HGridLayout;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {




int    stageW     = 1000;
int    stageH     = 1000;
int  clrBG      = 0xFF242424;
String pathAssets = "../../../assets/";

int gridCols = 10;
int gridRows = 10;
int gridTotal = gridCols * gridRows;
int gridStartX = 0;
int gridStartY = 0;// where to start grid
int gridSpaceX = 100;
int gridSpaceY = 100;//spacing between cells

HGridLayout layout;

PVector[] pos = new PVector[gridTotal];

 public void settings() {
	size(stageW, stageH, P3D);
}

 public void setup() {
	H.init(this);
	background(clrBG);

	layout = new HGridLayout().startX(gridStartX).startY(gridStartY).spacing(gridSpaceX,gridSpaceY).cols(gridCols);
	for (int i = 0; i < gridTotal; ++i) {
		pos[i] = new PVector();
		pos[i] = layout.getNextPoint();
	}
}

 public void draw() {
	background(clrBG);

	for (int i = 0; i < gridTotal; ++i) {
		PVector _p = pos[i];
		push();
			translate(_p.x,_p.y,_p.z);
			rect(0,0,99,99);
		pop();
	}
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
