/* autogenerated by Processing revision 1283 on 2022-07-25 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import hype.*;
import hype.extended.behavior.HOscillator;
import hype.extended.layout.HSphereLayout;
import ddf.minim.*;
import ddf.minim.analysis.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {





int         stageW         = 1920;
int         stageH         = 1080;
int       clrBG          = 0xFF242424;
String      pathAssets     = "../../../assets/";

// ************************************************************************************

// THIS IS THE AUDIO VARS




Minim       minim;
AudioPlayer myAudioPlayer;
String      whichAudioFile = "DM2.mp3";

AudioInput  myAudioInput;
boolean     myAudioToggle  = true; // true = myAudioPlayer / false = myAudioInput
boolean     showVisualizer = false;

FFT         myAudioFFT;

int         myAudioRange   = 16; // 256 / 128(2) / 64(4) / 32(8) / 16(16)
int         myAudioMax     = 100;

float       myAudioAmp;
float       myAudioIndex;
float       myAudioIndexAmp;
float       myAudioIndexStep;

float[]     myAudioData    = new float[myAudioRange]; // KEEP A RECORD OF ALL THE NUMBERS IN AN ARRAY

// ************************************************************************************

// THIS ALL THE WORKING WITH COLOR STUFF

String      whichImg       = pathAssets + "rainbow.png";
PImage      clrs;
int         clrsW;
float       clrCount;
float       clrSpeed       = 0.02f; // the speed of the color change
float       clrOffset      = 0.0025f; // the distance from each of the squares getting colored

// ************************************************************************************

// VARS TO RENDER SOME IMAGES

boolean     letsRender     = false; // RENDER YES OR NO
int         renderModulo   = 120;    // RENDER AN IMAGE ON WHAT TEMPO ?
int         renderNum      = 0;     // FIRST IMAGE
int         renderMax      = 20;    // HOW MANY IMAGES
String      renderPATH     = "../renders_001/";

// ************************************************************************************

// LOAD IN A TEXTURES TO MAP TO A SPRITE

// back / left / right / top / bottom / front

String[]    texNames       = { "square.png", "square.png", "square.png", "square.png", "square.png", "square.png" };
int         texNamesLen    = texNames.length;
PImage[]    tex            = new PImage[texNamesLen];

// *********************************************************************************************

int         numAssets      = 318; // 100 // 318

int         layoutRadius   = 2000;
int         layoutStartX   = 0;
int         layoutStartY   = 0;
int         layoutStartZ   = 500;

HSphereLayout layout;

PVector[]   pos            = new PVector[numAssets];

// *********************************************************************************************

HOscillator masterRX, masterRY, masterRZ, masterP;

HOscillator[] oscRX        = new HOscillator[numAssets];
HOscillator[] oscRY        = new HOscillator[numAssets];
HOscillator[] oscRZ        = new HOscillator[numAssets];
HOscillator[] oscS         = new HOscillator[numAssets];

// *********************************************************************************************

int[]       myPickedAudio  = new int[numAssets];

// *********************************************************************************************


 public void settings() {
	size(stageW, stageH, P3D);
	fullScreen();
}

 public void setup() {
	H.init(this);
	background(clrBG);
	audioSetup();

	clrs = loadImage(whichImg);
	clrsW = clrs.width-1;

	// LOAD THE TEXTURES
	for (int i = 0; i < texNamesLen; ++i) {
		tex[i] = loadImage(pathAssets + texNames[i]);
	}
	textureMode(NORMAL);

	// BUILD THE hex and OSC
	layout = new HSphereLayout().loc(layoutStartX,layoutStartY,layoutStartZ).radius(layoutRadius).ignorePoles().offsetRows(true);

	layout.useSpiral()  // tells layout to use the Fibonacci spiral layout calculations
		.numPoints(numAssets) // how many points to plot on the sphere. This can be the same number as objects in your pool
	;

	for (int i = 0; i < numAssets; ++i) {
		pos[i] = layout.getNextPoint();
		myPickedAudio[i] = (int)random(12);

		oscRX[i] = new HOscillator().range(-180, 180).speed(1).freq(1).currentStep(i*3).waveform(H.SINE);
		oscRY[i] = new HOscillator().range(-180, 180).speed(1).freq(1).currentStep(i*3).waveform(H.SINE);
		oscRZ[i] = new HOscillator().range(-180, 180).speed(1).freq(1).currentStep(i*3).waveform(H.SINE);
		oscS[i]  = new HOscillator().range(10, 500).speed(1).freq(10).currentStep(i).waveform(H.SINE);
	}

	masterRX = new HOscillator().range(-180, 180).speed(0.1f).freq(0.9f).waveform(H.SINE);
	masterRY = new HOscillator().range(-180, 180).speed(0.1f).freq(0.8f).waveform(H.SINE);
	masterRZ = new HOscillator().range(-180, 180).speed(0.1f).freq(0.7f).waveform(H.SINE);
	masterP = new HOscillator().range(1.2f, 3.0f).speed(0.1f).freq(5).waveform(H.SINE);
}

 public void draw() {
	background( clrBG );

// ************************************************************************************

	float _MRX = map(myAudioData[ myPickedAudio[2] ], 0, myAudioMax, 0.05f, 0.75f);
	masterRX.speed(_MRX);
	masterRX.nextRaw();

	float _MRY = map(myAudioData[ myPickedAudio[4] ], 0, myAudioMax, 0.05f, 0.75f);
	masterRY.speed(_MRY);
	masterRY.nextRaw();

	float _MRZ = map(myAudioData[ myPickedAudio[6] ], 0, myAudioMax, 0.05f, 0.75f);
	masterRZ.speed(_MRZ);
	masterRZ.nextRaw();

	float _MS = map(myAudioData[ myPickedAudio[0] ], 0, myAudioMax, 0.05f, 0.5f);
	masterP.speed(_MS);
	masterP.nextRaw();

	push();
		translate(stageW/2, stageH/2, 0);

		perspective(PI/masterP.curr(), (float)(width*2)/(height*2), 0.1f, 1000000);

		rotateX(radians(masterRX.curr()));
		rotateY(radians(masterRY.curr()));
		rotateZ(radians(masterRZ.curr()));

		for (int i = 0; i < numAssets; ++i) {
			HOscillator _oscRX = oscRX[i];
			float _aRX = map(myAudioData[ myPickedAudio[i] ], 0, myAudioMax, 0.0f, 0.75f);
			_oscRX.speed(_aRX);
			_oscRX.nextRaw(); 

			HOscillator _oscRY = oscRY[i];
			float _aRY = map(myAudioData[ myPickedAudio[i] ], 0, myAudioMax, 0.0f, 0.5f);
			_oscRY.speed(_aRY);
			_oscRY.nextRaw(); 

			HOscillator _oscRZ = oscRZ[i];
			float _aRZ = map(myAudioData[ myPickedAudio[i] ], 0, myAudioMax, 0.0f, 0.25f);
			_oscRZ.speed(_aRZ);
			_oscRZ.nextRaw(); 

			HOscillator _oscS = oscS[i];
			float _aS = map(myAudioData[ myPickedAudio[i] ], 0, myAudioMax, 0.0f, 1.0f);
			_oscS.speed(_aS);
			_oscS.nextRaw(); 

			push();
				translate(pos[i].x, pos[i].y, pos[i].z );
				scale(_oscS.curr());

				rotateX(radians(_oscRX.curr()));
				rotateY(radians(_oscRY.curr()));
				rotateZ(radians(_oscRZ.curr()));

				float wave = sin( clrCount+(i*clrOffset) );
				float waveMap = map(wave, -1, 1, 0, clrsW);
				tint( clrs.get((int)waveMap,0), 255 );

				buildCube(tex[0], tex[1], tex[2], tex[3], tex[4], tex[5]);
			pop();
		}
	pop();

// ************************************************************************************

	noLights();
	audioUpdate();
	clrCount += clrSpeed;

	if(frameCount%(renderModulo)==0 && letsRender) {
		save(renderPATH + renderNum + ".png");
		renderNum++;
		if(renderNum>=renderMax) exit();
	}
}

// ************************************************************************************

 public void keyPressed() {
	switch (key) {
		case '1': if(!myAudioToggle){myAudioInput.close();} myAudioToggle = true;  minim.stop(); audioSetup(); break; // audioPlayer
		case '2': if(myAudioToggle){myAudioPlayer.close();} myAudioToggle = false; minim.stop(); audioSetup(); break; // audioInput

		case 's': myAudioPlayer.pause();  break;
		case 'p': myAudioPlayer.play();   break;
		case 'm': myAudioPlayer.mute();   break;
		case 'u': myAudioPlayer.unmute(); break;

		case 'v': showVisualizer = !showVisualizer; break;
	}
}

// ************************************************************************************

 public void buildCube(PImage _t1, PImage _t2, PImage _t3, PImage _t4, PImage _t5, PImage _t6) {
	strokeWeight(0);
	noStroke();

	// back
	beginShape(QUADS);
		texture(_t1);
		vertex( (0.5f), -(0.5f), -(0.5f),   0, 0);
		vertex(-(0.5f), -(0.5f), -(0.5f),   1, 0);
		vertex(-(0.5f),  (0.5f), -(0.5f),   1, 1);
		vertex( (0.5f),  (0.5f), -(0.5f),   0, 1);
	endShape(CLOSE);

	// left
	beginShape(QUADS);
		texture(_t2);
		vertex(-(0.5f), -(0.5f), -(0.5f),   0, 0);
		vertex(-(0.5f), -(0.5f),  (0.5f),   1, 0);
		vertex(-(0.5f),  (0.5f),  (0.5f),   1, 1);
		vertex(-(0.5f),  (0.5f), -(0.5f),   0, 1);
	endShape(CLOSE);

	// right
	beginShape(QUADS);
		texture(_t3);
		vertex( (0.5f), -(0.5f),  (0.5f),   0, 0);
		vertex( (0.5f), -(0.5f), -(0.5f),   1, 0);
		vertex( (0.5f),  (0.5f), -(0.5f),   1, 1);
		vertex( (0.5f),  (0.5f),  (0.5f),   0, 1);
	endShape(CLOSE);

	// top
	beginShape(QUADS);
		texture(_t4);
		vertex(-(0.5f), -(0.5f), -(0.5f),   0, 0);
		vertex( (0.5f), -(0.5f), -(0.5f),   1, 0);
		vertex( (0.5f), -(0.5f),  (0.5f),   1, 1);
		vertex(-(0.5f), -(0.5f),  (0.5f),   0, 1);
	endShape(CLOSE);

	// bottom
	beginShape(QUADS);
		texture(_t5);
		vertex(-(0.5f),  (0.5f),  (0.5f),   0, 0);
		vertex( (0.5f),  (0.5f),  (0.5f),   1, 0);
		vertex( (0.5f),  (0.5f), -(0.5f),   1, 1);
		vertex(-(0.5f),  (0.5f), -(0.5f),   0, 1);
	endShape(CLOSE);

	// front
	beginShape(QUADS);
		texture(_t6);
		vertex(-(0.5f), -(0.5f),  (0.5f),   0, 0); // x, y, z, u, v
		vertex( (0.5f), -(0.5f),  (0.5f),   1, 0); // x, y, z, u, v
		vertex( (0.5f),  (0.5f),  (0.5f),   1, 1); // x, y, z, u, v
		vertex(-(0.5f),  (0.5f),  (0.5f),   0, 1); // x, y, z, u, v
	endShape(CLOSE);
}

// ************************************************************************************

// THIS IS THE VARS FOR THE RECTS IN THE VISUALIZER

float visX = 1.0f;
float visY = 1.0f;
float visW = ((PApplet.parseFloat(stageW)-(visX*2))-(PApplet.parseFloat(myAudioRange)-1)) / PApplet.parseFloat(myAudioRange);
float visH = 2.0f;
float visS = (PApplet.parseFloat(stageW)-(visX*2)) / PApplet.parseFloat(myAudioRange);

// ************************************************************************************

 public void audioSetup() {
	switch (myAudioRange) {
		case 16 :
			myAudioAmp       = 40.0f;
			myAudioIndex     = 0.2f;
			myAudioIndexStep = 0.30f;
			break;
		case 32 :
			myAudioAmp       = 30.0f;
			myAudioIndex     = 0.17f;
			myAudioIndexStep = 0.225f;
			break;
		case 64 :
			myAudioAmp       = 25.0f;
			myAudioIndex     = 0.125f;
			myAudioIndexStep = 0.175f;
			break;
		case 128 :
			myAudioAmp       = 30.0f;
			myAudioIndex     = 0.075f;
			myAudioIndexStep = 0.05f;
			break;
		case 256 : default :
			myAudioAmp       = 20.0f;
			myAudioIndex     = 0.05f;
			myAudioIndexStep = 0.025f;
			break;
	}
	myAudioIndexAmp  = myAudioIndex;

	minim = new Minim(this);

	if (myAudioToggle) {
		myAudioPlayer = minim.loadFile(pathAssets + whichAudioFile);
		myAudioPlayer.loop();
		// myAudioPlayer.mute();
		myAudioFFT = new FFT(myAudioPlayer.bufferSize(), myAudioPlayer.sampleRate());
		myAudioFFT.linAverages(myAudioRange);
		myAudioFFT.window(FFT.GAUSS);
	} else {
		myAudioInput = minim.getLineIn(Minim.MONO);
		myAudioFFT = new FFT(myAudioInput.bufferSize(), myAudioInput.sampleRate());
		myAudioFFT.linAverages(myAudioRange);
		myAudioFFT.window(FFT.NONE);
	}

}

// ************************************************************************************

 public void audioUpdate() {
	hint(DISABLE_DEPTH_TEST);
	noLights();
	perspective(PI/3.0f, (float)(width*2)/(height*2), 0.1f, 1000000);

	if (myAudioToggle) myAudioFFT.forward(myAudioPlayer.mix);
	else               myAudioFFT.forward(myAudioInput.mix);

	if(showVisualizer) {
		strokeWeight(0);
		noStroke();
		fill(0xFF000000, 245);
		rect(visX, visY, stageW, myAudioMax+30);
	}

	for (int i = 0; i < myAudioRange; ++i) {
		strokeWeight(0);
		noStroke();

		float tempIndexAvg = (myAudioFFT.getAvg(i) * myAudioAmp) * myAudioIndexAmp;
		myAudioIndexAmp+=myAudioIndexStep;
		float tempIndexCon = constrain(tempIndexAvg, 0, myAudioMax);
		myAudioData[i]     = tempIndexCon; // RECODE THE NUMBERS FROM - 0 TO 100

		if (showVisualizer) {
			if(tempIndexCon<=visH)                         fill(0xFF333333); // NO AUDIO
			else if(tempIndexCon>visH && tempIndexCon<=10) fill(0xFF2EA893); // visH to 10
			else if(tempIndexCon>10 && tempIndexCon<=20)   fill(0xFF64BE7A); // 11 to 20
			else if(tempIndexCon>20 && tempIndexCon<=30)   fill(0xFF9AD561); // 21 to 30
			else if(tempIndexCon>30 && tempIndexCon<=40)   fill(0xFFCCEA4A); // 31 to 40
			else if(tempIndexCon>40 && tempIndexCon<=50)   fill(0xFFFFFF33); // 41 to 50
			else if(tempIndexCon>50 && tempIndexCon<=60)   fill(0xFFF8EF33); // 51 to 60
			else if(tempIndexCon>60 && tempIndexCon<=70)   fill(0xFFFFC725); // 61 to 70
			else if(tempIndexCon>70 && tempIndexCon<=80)   fill(0xFFFF9519); // 71 to 80
			else if(tempIndexCon>80 && tempIndexCon<=90)   fill(0xFFFF620C); // 81 to 90
			else                                           fill(0xFFFF3300); // 91 to 100

			rect( visX + (i*visS), ((visY-(visH/2))+(myAudioMax/2))-(tempIndexCon/2), visW, visH+tempIndexCon);

			textSize(14);
			text( (int)myAudioData[i], visX + (i*visS), visY+(myAudioMax+20) );

			strokeWeight(1);
			stroke(0xFF666666);
			noFill();
			line(0, visY, stageW, visY);
			line(0, visY+myAudioMax, stageW, visY+myAudioMax);
			line(0, visY+(myAudioMax+30), stageW, visY+(myAudioMax+30));
		}
	}
	myAudioIndexAmp = myAudioIndex;
	hint(ENABLE_DEPTH_TEST);
}

// ************************************************************************************

 public void stop() {
	if (myAudioToggle) myAudioPlayer.close();
	else               myAudioInput.close();
	minim.stop();  
	super.stop();
}

// ************************************************************************************


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
