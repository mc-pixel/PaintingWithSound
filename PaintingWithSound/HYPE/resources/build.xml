<project name="HYPE Processing Library" default="clean" basedir="../">
    
<!--	
		Properties for your project should be set and modified in the  
		build.properties file (located in the same folder as this build.xml file).
		
		Modified from Processing Library Template (https://github.com/processing/processing-library-template)
-->

	<property file="./resources/build.properties" />
	
	<description>
        ${ant.description}
    </description>
    
	<property name="line" value="------------------------------------------------------------------------------------------------" />
	
	<condition property="is.normal">
		<equals arg1="${project.compile}" arg2="normal" />
	</condition>

	<!-- set the OS properties -->
	<condition property="is.mac">
        <os family="mac" />
	</condition>
	<condition property="is.windows">
        <os family="windows" />
	</condition>
	<condition property="is.unix">
        <os family="unix" />
	</condition>

	<property name="project.jar.name" value="${project.name}.jar"/>
	<property name="project.src" location="src"/>
	<property name="project.tmp" location="tmp"/>
	<property name="project.web" location="resources/web"/>
	<property name="project.data" location="data"/>
	<property name="project.lib" location="library"/>
	<property name="project.ref" location="reference"/>
	<property name="project.bin" location="bin"/>
	<property name="project.bin.data" location="${project.bin}/data"/>
	<property name="project.examples" location="examples"/>
	<property name="project.reference" location="reference"/>
	<property name="readme.source" location="resources/README.md"/>
	<property name="readme.destination" location="../README.md"/>
	<property name="libprops.source" location="resources/library.properties"/>
	<property name="libprops.destination" location="library.properties"/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="./resources/code/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<path id="classpath">
		<fileset dir="${classpath.local.location}" includes="${classpath.local.include}" />
		<fileset dir="${classpath.libraries.location}" includes="**/*.jar" />
		<!--<fileset dir="${project.lib}" includes="**/*.jar" />-->
	</path>

	<!-- Create the time stamp -->
	<tstamp> 
		<format property="date" pattern="MM/dd/yyyy" offset="0" unit="hour"/>
	</tstamp>

	<target name="clean" depends="library.run">
		<delete dir="${project.bin}"/>
		<delete dir="${project.tmp}"/>
		<echo>
			${line}
			Name        ${project.name}
			Version     ${library.prettyVersion} (${library.version})
			Compiled    ${project.compile}
			Sketchbook  ${sketchbook.location}
			${line}
			done, finished.
			${line}
		</echo>
	</target>

	<target name="init">
		<echo>
			${line}
				Building the Processing library ${project.name} ${library.prettyVersion}
			${line}
				src path        ${project.src}
				bin path        ${project.bin}
				classpath.local	${classpath.local.location}
				sketchbook      ${sketchbook.location}
				java version    ${java.target.version}
			${line}
		</echo>
		<mkdir dir="${project.bin}"/>
	</target>
	
	<target name="library.init" depends="init"> 
		<echo message="init library ..." />
	</target>

	<!-- execute all Ant targets -->
	<target name="library.run" depends="library.init"> 
		<echo message="building library ..." />
		<antcall target="generate.structure"><param name="folder" value="library"/></antcall>
		<antcall target="generate.source" />
		<antcall target="compile" />
	  	<antcall target="generate.jar"><param name="folder" value="library"/></antcall>
	  	<antcall target="generate.javadoc" />
		<antcall target="generate.libprops" />
		<antcall target="generate.readme" />
		<antcall target="copyToSketchbook"><param name="folder" value="libraries"/></antcall>
		<antcall target="copy.refs" />
	  	<delete dir="${project.tmp}"/>
	</target>

	<!-- build sources into jar only -->
	<target name="library.buildSources" depends="library.init">
		<echo message="building sources ..." />
		<antcall target="generate.structure"><param name="folder" value="library"/></antcall>
		<antcall target="generate.source" />
		<antcall target="compile" />
		<antcall target="generate.jar"><param name="folder" value="library"/></antcall>
		<delete dir="${project.tmp}"/>
		<delete dir="${project.bin}"/>
	</target>

	<!-- build folder structure -->
	<target name="generate.structure">
		<delete dir="${project.tmp}" />
		<mkdir dir="${project.tmp}" />
		<mkdir dir="${project.tmp}/${project.name}" />
		<mkdir dir="${project.tmp}/${project.name}/${folder}" />
		<mkdir dir="${project.tmp}/${project.name}/examples" />
		<mkdir dir="${project.tmp}/${project.name}/reference" />
		<mkdir dir="${project.tmp}/${project.name}/src" />
		<copy todir="${project.tmp}/${project.name}/examples">
			<fileset dir="${project.examples}">
				<exclude name="**/*README*"/>
			</fileset>
		</copy>
		<copy todir="${project.tmp}/${project.name}/src">
			<fileset dir="${project.src}">
				<exclude name="**/main/test/*"/>
			</fileset>
		</copy>
	</target>

	<target name="generate.source" if="is.normal">
		<antcall target="generate.source.win"/>
		<antcall target="generate.source.nix"/>
	</target>

	<!-- These two targets are pretty much the same, except for the delimiter (can't find a better way of doing this) -->
	<target name="generate.source.win" if="is.windows">
		<echo message="generating source (windows) ..."/>
		<path id="src.contents"><fileset dir="${project.tmp}/${project.name}/src" includes="**/*.java" /></path>
		<property name="src.list" refid="src.contents" />
		<foreach list="${src.list}" param="file" target="parse.file" delimiter=";" />
	</target>
	<target name="generate.source.nix" unless="is.windows">
		<echo message="generating source (mac/linux) ..."/>
		<path id="src.contents"><fileset dir="${project.tmp}/${project.name}/src" includes="**/*.java" /></path>
		<property name="src.list" refid="src.contents" />
		<foreach list="${src.list}" param="file" target="parse.file" delimiter=":" />
	</target>

	<!-- run javac -->
	<target name="compile">
		<javac srcdir="${project.tmp}/${project.name}/src" destdir="${project.bin}" source="${java.target.version}" target="${java.target.version}" includeantruntime="false">
			<classpath>
				<path refid="classpath"/>
			</classpath>
			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<!-- generate JAR for library -->
	<target name="generate.jar">
		<jar jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}" basedir="${project.bin}"/>
		<copy file="${project.tmp}/${project.name}/${folder}/${project.jar.name}" tofile="${project.lib}/${project.jar.name}" />
	</target>

	<!-- create the java reference of the library -->
	<target name="generate.javadoc" if="is.normal">
		<javadoc bottom="Processing library ${project.name} by ${author.name}. ${library.copyright}"
		         classpath="${classpath.local.location}/core.jar;{project.bin}"
		         destdir="${project.tmp}/${project.name}/reference"
		         verbose="false"
		         stylesheetfile="resources/reference/stylesheet.css"
		         doctitle="Javadocs: ${project.name}"
		         public="true" version="false"
		         windowtitle="Javadocs: ${project.name}"
		         additionalparam="-notimestamp">

			<link href="${javadoc.java.href}" />
			<link href="${javadoc.processing.href}" />
			<taglet name="ExampleTaglet" path="resources/code" />
			<fileset dir="${project.tmp}/${project.name}/src" defaultexcludes="yes">
				<!-- add packages to be added to reference. -->
				<include name="**/*"/>
			</fileset>
		</javadoc>
	</target>

	<!-- generate library.properties file -->
	<target name="generate.libprops" if="is.normal">
		<delete file="${libprops.destination}" />
		<copy file="${libprops.source}" tofile="${libprops.destination}" />
		<antcall target="parse.file"><param name="file" value="${libprops.destination}"/></antcall>
		<copy file="${libprops.destination}" tofile="${project.tmp}/${project.name}/library.properties" />
	</target>

	<!-- generate readme file from template -->
	<target name="generate.readme" if="is.normal">
		<delete file="${readme.destination}" />
		<copy file="${readme.source}" tofile="${readme.destination}" />
		<antcall target="parse.file"><param name="file" value="${readme.destination}"/></antcall>
		<copy file="${readme.destination}" tofile="${project.tmp}/${project.name}/README.md" />
	</target>

	<!-- copy library to user's sketchbook folder -->
	<target name="copyToSketchbook">
		<echo message="copying files to the ${folder} folder in your sketchbook." />
		<!-- copy the jar file to processing's sketchbook libraries folder -->
		<delete dir="${sketchbook.location}/${folder}/${project.name}" />
  	  	<mkdir dir="${sketchbook.location}/${folder}/${project.name}" />
  		<copy todir="${sketchbook.location}/${folder}/${project.name}">
  			<fileset dir="${project.tmp}/${project.name}"/>
  		</copy> 
	</target>

	<!-- move docs into /reference folder -->
	<target name="copy.refs" if="is.normal">
		<delete dir="${project.ref}" />
		<mkdir dir="${project.ref}" />
		<copy todir="${project.ref}">
			<fileset dir="${project.tmp}/${project.name}/reference" />
		</copy>
	</target>
    
    <!-- find and replace ##placeholder## keywords in a file -->
    <target name="parse.file">
        <echo message="${file}" />
        
        <replaceregexp file="${file}" match="##date##" replace="${date}" flags="g" />
        <replaceregexp file="${file}" match="##copyright##" replace="${library.copyright}" flags="g" />
        
    	<replaceregexp file="${file}" match="##author##" replace="${author.name} ${author.url}" flags="g" />
    	<replaceregexp file="${file}" match="##author.name##" replace="${author.name}" flags="g" />
    	<replaceregexp file="${file}" match="##author.url##" replace="${author.url}" flags="g" />
    	        
    	<replaceregexp file="${file}" match="##library.name##" replace="${project.name}" flags="g" />
    	<replaceregexp file="${file}" match="##project.name##" replace="${project.name}" flags="g" />
    	        
        <replaceregexp file="${file}" match="##library.version##" replace="${library.version}" flags="g" />
        <replaceregexp file="${file}" match="##library.prettyVersion##" replace="${library.prettyVersion}" flags="g" /> 
        
        <replaceregexp file="${file}" match="##compatible.minRevision##" replace="${compatible.minRevision}" flags="g" />
        <replaceregexp file="${file}" match="##compatible.maxRevision##" replace="${compatible.maxRevision}" flags="g" /> 
        
        <replaceregexp file="${file}" match="##library.url##" replace="${library.url}" flags="g" />
        <replaceregexp file="${file}" match="##library.category##" replace="${library.category}" flags="g" />
        <replaceregexp file="${file}" match="##library.sentence##" replace="${library.sentence}" flags="g" />
    	<replaceregexp file="${file}" match="##library.paragraph##" replace="${library.paragraph}" flags="g" />
    	<replaceregexp file="${file}" match="##library.keywords##" replace="${library.keywords}" flags="g" />
        <replaceregexp file="${file}" match="##library.dependencies##" replace="${library.dependencies}" flags="g" />
    	
    	<replaceregexp file="${file}" match="##source.host##" replace="${source.host}" flags="g" />
    	<replaceregexp file="${file}" match="##source.url##" replace="${source.url}" flags="g" />
    	<replaceregexp file="${file}" match="##source.repository##" replace="${source.repository}" flags="g" />
    	
    	<replaceregexp file="${file}" match="##tested.platform##" replace="${tested.platform}" flags="g" />
    	<replaceregexp file="${file}" match="##tested.processingVersion##" replace="${tested.processingVersion}" flags="g" />
    </target>

</project>