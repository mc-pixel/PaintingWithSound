/* autogenerated by Processing revision 1283 on 2022-07-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class build extends PApplet {

int    stageW     = 1200;
int    stageH     = 900;
int  clrBG      = 0xFF242424;
String pathAssets = "../../../assets/";

String whichImg = pathAssets + "rainbow.png";
PImage clrs;
int clrsW;
float  clrCount;
float clrSpeed = 0.02f; //speed of the colour change 
float clrOffset = -200.6f;

int numSquares = 200;
PVector[] squarePos = new PVector[numSquares];//stores x,y,z



 public void settings() {
	size(stageW,stageH,P3D);
}

 public void setup(){
	background(clrBG);
	//surface.setLocation(100,100);//position where the window goes 
	clrs = loadImage(whichImg);
	clrsW = clrs.width-1;
	for (int i = 0; i < numSquares; ++i) {
		squarePos[i] = new PVector();
		squarePos[i].x = (int)random(stageW);
		squarePos[i].y = (int)random(stageH);
		squarePos[i].z = (int)random(-500,500);

		
	}
	//println(squarePos);
}

 public void draw() {
	background(clrBG);
	//image(clrs, 0 ,0);
	lights();
	stroke(0);

	//noStroke();

	for (int i = 0; i < numSquares; ++i) {
		float wave1 = sin(clrCount + (i*clrOffset)) ;
		float waveMap1 = map(wave1,-1,1,0,clrsW );
		float zMap = map(wave1, -1,1,-1500,1500);

		/*//visualize markers on image
		fill(#000000);
		rect(waveMap1,0,5,25);
		strokeWeight(0);
		noStroke();*/
		fill(clrs.get((int)waveMap1,0));
		push();
		translate(squarePos[i].x,squarePos[i].y, squarePos[i].z + zMap);
		box(25,25,500);
		pop();
		rect(squarePos[i].x + (waveMap1*2),squarePos[i].y,10,10,20);
	}

	clrCount += clrSpeed;

}
/*git compare*/


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "build" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
